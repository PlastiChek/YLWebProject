import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = '7852977293:AAErYW-USOtu5Y_4PsMg-caKta23sofD9Ww'
ADMIN_ID = 1427154863

subscribed_users = set()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_user_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)


def get_admin_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìù –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")],
        [KeyboardButton("üë§ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")]
    ], resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    if user.id == ADMIN_ID:
        await update.message.reply_text(
            "üëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            reply_markup=get_admin_keyboard()
        )
    else:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=get_user_keyboard()
        )


async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return

    user = update.effective_user
    text = update.message.text if update.message.text else ""

    if user.id == ADMIN_ID:
        if text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            )
            context.user_data['awaiting_message'] = True
            return

        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await stats(update, context)
            return

        elif text == "üìù –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤":
            await export_users(update, context)
            return

        elif text == "üë§ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º":
            await update.message.reply_text(
                "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º",
                reply_markup=get_user_keyboard()
            )
            return

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_keyboard()
            )
            context.user_data.pop('awaiting_message', None)
            return

        elif context.user_data.get('awaiting_message'):
            await admin_message(update, context)
            return

    if text == "üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
        await subscribe(update, context)
    elif text == "üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        await unsubscribe(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    if user.id in subscribed_users:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
        return

    subscribed_users.add(user.id)
    logger.info(f"New subscriber: {user.id}")

    await update.message.reply_text(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!",
        reply_markup=get_user_keyboard()
    )

    try:
        await context.bot.send_message(
            ADMIN_ID,
            f"‚ûï –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user.full_name} (ID: {user.id})\n"
            f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribed_users)}"
        )
    except Exception as e:
        logger.error(f"Can't notify admin: {e}")


async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    if user.id not in subscribed_users:
        await update.message.reply_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
        return

    subscribed_users.remove(user.id)
    logger.info(f"User {user.id} unsubscribed")

    await update.message.reply_text(
        "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=get_user_keyboard()
    )

    try:
        await context.bot.send_message(
            ADMIN_ID,
            f"‚ûñ –û—Ç–ø–∏—Å–∞–ª—Å—è: {user.full_name} (ID: {user.id})\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribed_users)}"
        )
    except Exception as e:
        logger.error(f"Can't notify admin: {e}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π:\n\n"
        "üì© <b>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</b> - –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "üö´ <b>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è</b> - –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)


async def admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    message = update.message
    success_count = 0
    fail_count = 0
    errors = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_type = None
    if message.text:
        content_type = "text"
    elif message.photo:
        content_type = "photo"
    elif message.document:
        content_type = "document"

    for user_id in subscribed_users:
        try:
            if content_type == "text":
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message.text
                )
            elif content_type == "photo":
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=message.photo[-1].file_id,
                    caption=message.caption
                )
            elif content_type == "document":
                await context.bot.send_document(
                    chat_id=user_id,
                    document=message.document.file_id,
                    caption=message.caption
                )
            success_count += 1
        except Exception as e:
            fail_count += 1
            errors.append(f"{user_id}: {str(e)}")
            logger.error(f"Send failed to {user_id}: {e}")

    report = (
        f"üìä <b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</b>\n\n"
        f"üì§ –¢–∏–ø: <b>{content_type}</b>\n"
        f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏: <b>{success_count}</b>\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{fail_count}</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{len(subscribed_users)}</b>"
    )

    if errors:
        report += "\n\n<b>–û—à–∏–±–∫–∏:</b>\n" + "\n".join(errors[:3])

    await context.bot.send_message(
        ADMIN_ID,
        report,
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_keyboard()
    )

    context.user_data.pop('awaiting_message', None)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    stats_text = (
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{len(subscribed_users)}</b>\n"
        f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 ID:\n{', '.join(map(str, list(subscribed_users)[:5]))}"
    )

    await update.message.reply_text(
        stats_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_keyboard()
    )


async def export_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not subscribed_users:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    users_list = "\n".join([f"{i + 1}. {uid}" for i, uid in enumerate(subscribed_users)])
    await update.message.reply_text(
        f"üìù –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({len(subscribed_users)}):\n\n{users_list}",
        reply_markup=get_admin_keyboard()
    )


def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞
    application.add_handler(MessageHandler(
        filters.Chat(ADMIN_ID) & (
                filters.TEXT |
                filters.PHOTO |
                filters.ATTACHMENT
        ),
        admin_message
    ))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
