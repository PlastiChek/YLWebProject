import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
)
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "7681923219:AAHAVieNBa9RbxcenAr9avg80-KXr6HneCw"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_ACTION, ENTERING_ID, ENTERING_MESSAGE, ADMIN_MESSAGE = range(4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
def load_users_from_db():
    users = {}
    try:
        conn = sqlite3.connect("db/shops.sqlite")  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –ë–î
        cursor = conn.cursor()
        cursor.execute("SELECT id, name, telegram_id FROM users")

        for row in cursor.fetchall():
            user_id, name, telegram_id = row
            users[str(user_id)] = {
                "name": name if name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "telegram_id": telegram_id if telegram_id else None,
            }

        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        users = {
            "1": {"name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "telegram_id": 654321},
            "2": {"name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "telegram_id": 987654},
            "3": {"name": "–°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤", "telegram_id": 1427154863},
        }
    return users

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
users_db = load_users_from_db()

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")],
            [KeyboardButton("–ê–¥–º–∏–Ω—É")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ],
        resize_keyboard=True,
    )

async def start(update: Update, context: CallbackContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    context.user_data["bot_starter_chat_id"] = update.message.chat_id
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard()
    )
    return SELECTING_ACTION

async def select_action(update: Update, context: CallbackContext):
    text = update.message.text

    if text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = "\n".join(
            [
                f"ID: {user_id} - {user_data['name']} (TG: {user_data['telegram_id'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'})"
                for user_id, user_data in users_db.items()
            ]
        )

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ ID:\n\n{users_list}",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–ù–∞–∑–∞–¥")]], resize_keyboard=True
            ),
        )
        return ENTERING_ID

    elif text == "–ê–¥–º–∏–Ω—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
            ),
        )
        return ADMIN_MESSAGE

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=get_main_keyboard()
    )
    return SELECTING_ACTION

async def enter_id(update: Update, context: CallbackContext):
    user_id = update.message.text

    if user_id == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard()
        )
        return SELECTING_ACTION

    if user_id not in users_db:
        await update.message.reply_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
        )
        return ENTERING_ID

    if not users_db[user_id]["telegram_id"]:
        await update.message.reply_text(
            f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users_db[user_id]['name']} –Ω–µ —É–∫–∞–∑–∞–Ω Telegram ID. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
            reply_markup=get_main_keyboard(),
        )
        return SELECTING_ACTION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    context.user_data["recipient"] = {
        "id": user_id,
        "name": users_db[user_id]["name"],
        "telegram_id": users_db[user_id]["telegram_id"],
    }

    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users_db[user_id]['name']} (ID: {user_id}):",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True
        ),
    )
    return ENTERING_MESSAGE

async def enter_message(update: Update, context: CallbackContext):
    message_text = update.message.text
    sender_id = str(update.message.from_user.id)

    if message_text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard()
        )
        return SELECTING_ACTION

    recipient = context.user_data["recipient"]

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_message = f"""üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è: {recipient['name']} (ID: {recipient['id']})
–û—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_id}
----------------------------
{message_text}
----------------------------"""

    await update.message.reply_text(sender_message, reply_markup=get_main_keyboard())

    recipient_message = f"""üì® –í–∞–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {sender_id}
----------------------------
{message_text}
----------------------------"""

    try:
        await context.bot.send_message(
            chat_id=recipient["telegram_id"], text=recipient_message
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient['telegram_id']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é", reply_markup=get_main_keyboard()
        )

    return SELECTING_ACTION

async def handle_admin_message(update: Update, context: CallbackContext):
    message_text = update.message.text

    if message_text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard()
        )
        return SELECTING_ACTION

    # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    recipient_chat_id = context.user_data.get("bot_starter_chat_id")

    if not recipient_chat_id:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard()
        )
        return SELECTING_ACTION

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)
    await update.message.reply_text(
        f"""üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É:
----------------------------
{message_text}
----------------------------""",
        reply_markup=get_main_keyboard(),
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Å –ø–æ–º–µ—Ç–∫–æ–π "–æ—Ç –∞–¥–º–∏–Ω–∞")
    try:
        await context.bot.send_message(
            chat_id=recipient_chat_id,
            text=f"""üì® –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:
----------------------------
{message_text}
----------------------------""",
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=get_main_keyboard()
        )

    return SELECTING_ACTION

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard()
    )
    return SELECTING_ACTION

async def reload_users(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
    global users_db
    users_db = load_users_from_db()
    await update.message.reply_text(
        f"–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_db)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)
            ],
            ENTERING_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_id)
            ],
            ENTERING_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_message)
            ],
            ADMIN_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_message)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("reload", reload_users))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()