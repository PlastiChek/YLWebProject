import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = '7681923219:AAHAVieNBa9RbxcenAr9avg80-KXr6HneCw'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_ACTION, ENTERING_ID, ENTERING_MESSAGE = range(3)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID: {name, telegram_id})
users_db = {
    "123": {"name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "telegram_id": 654321},
    "456": {"name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "telegram_id": 987654},
    "789": {"name": "–°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤", "telegram_id": 1427154863}
}


def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')]],
        resize_keyboard=True
    )


async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return SELECTING_ACTION


async def select_action(update: Update, context: CallbackContext):
    text = update.message.text

    if text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é':
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = "\n".join(
            [f"ID: {user_id} - {user_data['name']} (TG: {user_data['telegram_id']})"
             for user_id, user_data in users_db.items()]
        )

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ ID:\n\n{users_list}",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton('–ù–∞–∑–∞–¥')]], resize_keyboard=True)
        )
        return ENTERING_ID

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=get_main_keyboard()
    )
    return SELECTING_ACTION


async def enter_id(update: Update, context: CallbackContext):
    user_id = update.message.text

    if user_id == '–ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return SELECTING_ACTION

    if user_id not in users_db:
        await update.message.reply_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
        )
        return ENTERING_ID

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    context.user_data['recipient'] = {
        'id': user_id,
        'name': users_db[user_id]['name'],
        'telegram_id': users_db[user_id]['telegram_id']
    }

    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users_db[user_id]['name']} (ID: {user_id}):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton('–û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    )
    return ENTERING_MESSAGE


async def enter_message(update: Update, context: CallbackContext):
    message_text = update.message.text
    sender_id = "456"  #TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π

    if message_text == '–û—Ç–º–µ–Ω–∞':
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        return SELECTING_ACTION

    recipient = context.user_data['recipient']

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_message = f"""üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è: {recipient['name']} (ID: {recipient['id']})
–û—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_id}
----------------------------
{message_text}
----------------------------"""

    await update.message.reply_text(sender_message, reply_markup=get_main_keyboard())

    recipient_message = f"""üì® –í–∞–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {sender_id}
----------------------------
{message_text}
----------------------------"""

    try:
        await context.bot.send_message(
            chat_id=recipient['telegram_id'],
            text=recipient_message
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient['telegram_id']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é",
            reply_markup=get_main_keyboard()
        )

    return SELECTING_ACTION


async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    return SELECTING_ACTION


async def test(update: Update, context: CallbackContext):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await context.bot.send_message(
            chat_id=1427154863,  # –í–∞—à Telegram ID
            text="‚úÖ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"
        )
        await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ACTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)
            ],
            ENTERING_ID: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_id)
            ],
            ENTERING_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_message)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('test', test))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
